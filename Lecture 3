class Vehicle {
    private String make;
    private String model;
    private int year;

    public Vehicle(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void start() {
        System.out.println("Starting " + year + " " + make + " " + model);
    }

    public void stop() {
        System.out.println("Stopping " + year + " " + make + " " + model);
    }
}

class Car extends Vehicle {
    private String transmission;

    public Car(String make, String model, int year, String transmission) {
        super(make, model, year);
        this.transmission = transmission;
    }

    public void display() {
        System.out.println(year + " " + make + " " + model + " - Transmission: " + transmission);
    }
}

class Bike extends Vehicle {
    private String type;

    public Bike(String make, String model, int year, String type) {
        super(make, model, year);
        this.type = type;
    }

    public void display() {
        System.out.println(year + " " + make + " " + model + " - Type: " + type);
    }
}

class Scooter extends Vehicle {
    private String engineSize;

    public Scooter(String make, String model, int year, String engineSize) {
        super(make, model, year);
        this.engineSize = engineSize;
    }

    public void display() {
        System.out.println(year + " " + make + " " + model + " - Engine Size: " + engineSize);
    }
}

class VehicleRentalService {
    public void rentVehicle(String vehicleType, String make, String model, int year, int rentalDuration, boolean insuranceIncluded) {
        if (vehicleType.equals("car")) {
            rentCar(make, model, year, rentalDuration, insuranceIncluded);
        } else if (vehicleType.equals("bike")) {
            rentBike(make, model, year, rentalDuration, insuranceIncluded);
        } else if (vehicleType.equals("scooter")) {
            rentScooter(make, model, year, rentalDuration, insuranceIncluded);
        } else {
            System.out.println("Invalid vehicle type.");
        }
    }

    private void rentCar(String make, String model, int year, int rentalDuration, boolean insuranceIncluded) {
        Car car = new Car(make, model, year, "Automatic");
        car.start();
        car.display();
        System.out.println("Renting for " + rentalDuration + " days.");
        if (insuranceIncluded) {
            System.out.println("Insurance included.");
        } else {
            System.out.println("Insurance not included.");
        }
        car.stop();
    }

    private void rentBike(String make, String model, int year, int rentalDuration, boolean insuranceIncluded) {
        Bike bike = new Bike(make, model, year, "Cruiser");
        bike.start();
        bike.display();
        System.out.println("Renting for " + rentalDuration + " days.");
        if (insuranceIncluded) {
            System.out.println("Insurance included.");
        } else {
            System.out.println("Insurance not included.");
        }
        bike.stop();
    }

    private void rentScooter(String make, String model, int year, int rentalDuration, boolean insuranceIncluded) {
        Scooter scooter = new Scooter(make, model, year, "125cc");
        scooter.start();
        scooter.display();
        System.out.println("Renting for " + rentalDuration + " days.");
        if (insuranceIncluded) {
            System.out.println("Insurance included.");
        } else {
            System.out.println("Insurance not included.");
        }
        scooter.stop();
    }
}

public class Main {
    public static void main(String[] args) {
        VehicleRentalService rentalService = new VehicleRentalService();

        // Rent a car for 5 days with insurance
        rentalService.rentVehicle("car", "Toyota", "Camry", 2020, 5, true);

        // Rent a bike for 3 days without insurance
        rentalService.rentVehicle("bike", "Harley-Davidson", "Sportster", 2021, 3, false);

        // Rent a scooter for 7 days with insurance
        rentalService.rentVehicle("scooter", "Honda", "Activa", 2019, 7, true);
    }
}
